// <auto-generated />
using System;
using Infrastructure.Data.Postgres.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("20231003112716_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.MyTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("MyTask_DeadLine")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MyTask_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MyTask_Status")
                        .HasColumnType("integer");

                    b.Property<string>("MyTask_Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Project_DeadLine")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Project_Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Project_Status")
                        .HasColumnType("integer");

                    b.Property<string>("Project_Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Room_Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Ticket_Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ticket_Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tc_no")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 10, 3, 14, 27, 16, 293, DateTimeKind.Utc).AddTicks(8180),
                            Email = "bg@gmail.com",
                            FullName = "Bülent Karanfil",
                            IsDeleted = false,
                            PasswordHash = new byte[] { 3, 224, 31, 43, 114, 221, 62, 143, 78, 231, 246, 144, 147, 145, 69, 201, 110, 190, 66, 183, 125, 250, 252, 187, 131, 157, 236, 73, 37, 145, 162, 51, 74, 242, 228, 171, 73, 16, 159, 159, 244, 183, 154, 1, 210, 105, 211, 32, 213, 120, 198, 168, 181, 162, 33, 207, 178, 51, 203, 179, 163, 218, 132, 186 },
                            PasswordSalt = new byte[] { 28, 9, 219, 186, 215, 241, 156, 135, 35, 11, 185, 139, 156, 126, 242, 170, 55, 66, 150, 246, 203, 236, 141, 228, 32, 34, 145, 90, 142, 182, 72, 14, 210, 243, 213, 247, 188, 138, 173, 86, 145, 50, 252, 194, 32, 247, 130, 244, 135, 82, 206, 129, 24, 171, 120, 64, 34, 169, 93, 18, 55, 65, 116, 223, 31, 177, 29, 197, 222, 190, 137, 92, 0, 144, 139, 148, 102, 197, 144, 79, 133, 92, 21, 46, 99, 155, 113, 121, 247, 208, 205, 194, 101, 102, 232, 125, 78, 172, 255, 127, 186, 11, 28, 121, 33, 0, 71, 91, 144, 246, 241, 100, 162, 196, 149, 249, 142, 72, 124, 203, 200, 66, 154, 100, 134, 54, 114, 22 },
                            Phone = "324763282348237",
                            Tc_no = "32324324234234",
                            UpdatedAt = new DateTime(2023, 10, 3, 14, 27, 16, 293, DateTimeKind.Utc).AddTicks(8260),
                            UserName = "bulent123",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 10, 3, 14, 27, 16, 293, DateTimeKind.Utc).AddTicks(8420),
                            Email = "kaam@gmail.com",
                            FullName = "Kan kaan",
                            IsDeleted = false,
                            PasswordHash = new byte[] { 3, 224, 31, 43, 114, 221, 62, 143, 78, 231, 246, 144, 147, 145, 69, 201, 110, 190, 66, 183, 125, 250, 252, 187, 131, 157, 236, 73, 37, 145, 162, 51, 74, 242, 228, 171, 73, 16, 159, 159, 244, 183, 154, 1, 210, 105, 211, 32, 213, 120, 198, 168, 181, 162, 33, 207, 178, 51, 203, 179, 163, 218, 132, 186 },
                            PasswordSalt = new byte[] { 28, 9, 219, 186, 215, 241, 156, 135, 35, 11, 185, 139, 156, 126, 242, 170, 55, 66, 150, 246, 203, 236, 141, 228, 32, 34, 145, 90, 142, 182, 72, 14, 210, 243, 213, 247, 188, 138, 173, 86, 145, 50, 252, 194, 32, 247, 130, 244, 135, 82, 206, 129, 24, 171, 120, 64, 34, 169, 93, 18, 55, 65, 116, 223, 31, 177, 29, 197, 222, 190, 137, 92, 0, 144, 139, 148, 102, 197, 144, 79, 133, 92, 21, 46, 99, 155, 113, 121, 247, 208, 205, 194, 101, 102, 232, 125, 78, 172, 255, 127, 186, 11, 28, 121, 33, 0, 71, 91, 144, 246, 241, 100, 162, 196, 149, 249, 142, 72, 124, 203, 200, 66, 154, 100, 134, 54, 114, 22 },
                            Phone = "324763282348237",
                            Tc_no = "45756865745654",
                            UpdatedAt = new DateTime(2023, 10, 3, 14, 27, 16, 293, DateTimeKind.Utc).AddTicks(8490),
                            UserName = "kan123",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.UserToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.MyTask", b =>
                {
                    b.HasOne("Infrastructure.Data.Postgres.Entities.User", "User")
                        .WithMany("MyTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Project", b =>
                {
                    b.HasOne("Infrastructure.Data.Postgres.Entities.Room", "Room")
                        .WithMany("Projects")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Postgres.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Room", b =>
                {
                    b.HasOne("Infrastructure.Data.Postgres.Entities.User", "User")
                        .WithMany("Rooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Ticket", b =>
                {
                    b.HasOne("Infrastructure.Data.Postgres.Entities.Room", "Room")
                        .WithMany("Tickets")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Data.Postgres.Entities.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.UserToken", b =>
                {
                    b.HasOne("Infrastructure.Data.Postgres.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.Room", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Infrastructure.Data.Postgres.Entities.User", b =>
                {
                    b.Navigation("MyTasks");

                    b.Navigation("Projects");

                    b.Navigation("Rooms");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
